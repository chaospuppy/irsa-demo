# Deploy kubernetes via k3s (which installs a bundled containerd).
# $ limactl start ./k3s.yaml
# $ limactl shell k3s sudo kubectl
#
# It can be accessed from the host by exporting the kubeconfig file;
# the ports are already forwarded automatically by lima:
#
# $ export KUBECONFIG=$PWD/kubeconfig.yaml
# $ limactl shell k3s sudo cat /etc/rancher/k3s/k3s.yaml >$KUBECONFIG
# $ kubectl get no
# NAME       STATUS   ROLES                  AGE   VERSION
# lima-k3s   Ready    control-plane,master   69s   v1.21.1+k3s1
#
# This example requires Lima v0.7.0 or later.
arch: x86_64

images:
- location: "https://cloud-images.ubuntu.com/releases/22.04/release-20220712/ubuntu-22.04-server-cloudimg-amd64.img"
  arch: "x86_64"
  digest: "sha256:86481acb9dbd62e3e93b49eb19a40c66c8aa07f07eff10af20ddf355a317e29f"
- location: "https://cloud-images.ubuntu.com/releases/22.04/release-20220712/ubuntu-22.04-server-cloudimg-arm64.img"
  arch: "aarch64"
  digest: "sha256:e1ce033239f0038dca5ef09e582762ba0d0dfdedc1d329bc51bb0e9f5057af9d"
# Fallback to the latest release image.
# Hint: run `limactl prune` to invalidate the cache
- location: "https://cloud-images.ubuntu.com/releases/22.04/release/ubuntu-22.04-server-cloudimg-amd64.img"
  arch: "x86_64"
- location: "https://cloud-images.ubuntu.com/releases/22.04/release/ubuntu-22.04-server-cloudimg-arm64.img"
  arch: "aarch64"


mounts:
- location: "/tmp/irsa-k3s"
  writable: true
- location: "/tmp/irsa-keys/"
  writable: true
  mountPoint: "/etc/kubernetes/irsa/pki/"

# containerd is managed by k3s, not by Lima, so the values are set to false here.
containerd:
  system: false
  user: false

memory: 16GiB

networks:
  # vnl (virtual network locator) points to the vde_switch socket directory,
  # optionally with vde:// prefix
  # - vnl: "vde:///var/run/vde.ctl"
  #   # VDE Switch port number (not TCP/UDP port number). Set to 65535 for PTP mode.
  #   # Default: 0
  #   switchPort: 0
  #   # MAC address of the instance; lima will pick one based on the instance name,
  #   # so DHCP assigned ip addresses should remain constant over instance restarts.
  #   macAddress: ""
  #   # Interface name, defaults to "lima0", "lima1", etc.
  #   interface: ""

provision:
- mode: system

- mode: system
  script: |
    #!/bin/sh
    sudo mkdir -p /etc/rancher/k3s/
    cat <<EOF | sudo tee /etc/rancher/k3s/registries.yaml
    mirrors:
      k3s-registry.internal:
        endpoint:
          - "http://host.lima.internal:5000"
      configs:
        k3s-registry.local:
          tls:
            insecure_skip_verify: true
    EOF
- mode: system
  script: |
    #!/bin/sh
    # curl -sfL https://get.k3s.io | INSTALL_K3S_EXEC="--kube-apiserver-arg '--service-account-issuer=https://s3-us-gov-west-1.amazonaws.com/irsa-demo-bucket' --kube-apiserver-arg '--service-account-signing-key-file=/etc/kubernetes/pki/sa-signer.key' --kube-apiserver-arg '--service-account-key-file=/etc/kubernetes/pki/sa-signer-pkcs8.pub' --kube-apiserver-arg '--api-audiences=irsa.demo'" sh -
    curl -sfL https://get.k3s.io | sh -

probes:
- script: |
    #!/bin/bash
    set -eux -o pipefail
    if ! timeout 30s bash -c "until test -f /etc/rancher/k3s/k3s.yaml; do sleep 3; done"; then
            echo >&2 "k3s is not running yet"
            exit 1
    fi
  hint: |
    The k3s kubeconfig file has not yet been created.
    Run "limactl shell k3s sudo journalctl -u k3s" to check the log.
    If that is still empty, check the bottom of the log at "/var/log/cloud-init-output.log".
message: |
  To run `kubectl` on the host (assumes kubectl is installed):
  $ mkdir -p "{{.Dir}}/conf"
  $ export KUBECONFIG="{{.Dir}}/conf/kubeconfig.yaml"
  $ limactl shell {{.Name}} sudo cat /etc/rancher/k3s/k3s.yaml >$KUBECONFIG
  $ kubectl ...
